import { Message as amqMessage } from 'amqplib/callback_api';
import { QWrapperDomain } from 'q-wrapper';
import eventBus from '@/utils/eventBus';
import objectReduceByMap from 'object-reduce-by-map';
import * as operationIds from '../operationIds';
{% set DomainName = ucFirst(operation_name) + 'Domain' -%}
import {{ DomainName }} from '../../domains/{{ DomainName }}'

{% set ChannelName = ucFirst(operation_name) + 'Channel' -%}
class {{ ChannelName }} {
  public publish (qWrapper: QWrapperDomain) {
    {% for op in operations -%}{% for method, channel in op.channel -%}{% if method === 'publish' %}
    {% set channelId = _.toUpper(channel.operationId) -%}
    eventBus.on(operationIds.{{ channelId }}, (payload: any) => {
      console.log('EVENT EMIT ' + operationIds.{{ channelId }});
      qWrapper.sendToExchange(
        objectReduceByMap(payload, {{ channel.message.payload | dump }}),
        operationIds.{{ channelId }});
    });
    {% endif %}{% endfor -%}{% endfor -%}
  }

  public subscribe (qWrapper: QWrapperDomain): void {
    qWrapper.consume(async (message: amqMessage) => {
      let processed = true;
      let requeue = false;
      switch (message.fields.routingKey) {
        {% for op in operations -%}{% for method, channel in op.channel -%}{% if method === 'subscribe' %}
        {% set channelId = _.toUpper(channel.operationId) -%}
        case operationIds.{{ channelId }}: {
          try {
            await {{ DomainName}}.{{channel.operationId}}(
              JSON.parse(message.content.toString())
            );
          } catch (e) {
            console.error(e);
            processed = false;
            requeue = true;
          }
          return {
            processed,
            requeue
          };
        }
        {% endif %}{% endfor -%}{% endfor -%}
        default:
          return {
            processed: true,
            requeue: false
          };
      }
    });
  }
}

export default new {{ ChannelName }}();
