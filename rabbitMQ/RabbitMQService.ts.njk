import { QWrapperDomain } from 'q-wrapper';
import { QWrapperSettings } from 'q-wrapper/lib/models';
import { Message as amqMessage } from 'amqplib/callback_api';
import objectReduceByMap from 'object-reduce-by-map';
import * as operationIds from './operationIds';
import * as interfaces from './interfaces';
{% for path, channel in swagger.channels -%}
{% if channel.publish and _.includes(nodegenRc.helpers.subscribeOpIds, channel.publish.operationId) -%}
import {{ channel.publish.operationId }}ReactHandle from '../reactHandles/{{ ucFirst(channel.publish.operationId) }}ReactHandle';
{% endif -%}
{% endfor %}

class RabbitMQService {
  async setup (qWrapperSettings: QWrapperSettings): Promise<void> {
    global.qWrapper = new QWrapperDomain(qWrapperSettings);
    await global.qWrapper.initialize();
    this.subscribe();
    console.log('RabbitMQService.setup completed.')
  }
  setupCheck (): void {
    if (!global.qWrapper) {
      throw new Error('Ensure you call the setup method 1st before calling anything else from this class and call it only once.');
    }
  }

  {% for path, channel in swagger.channels -%}
    {% if channel.publish and _.includes(nodegenRc.helpers.publishOpIds, channel.publish.operationId) -%}
    {% set channelId = _.toUpper(channel.publish.operationId) -%}
  /**
   * Path: {{ path }} publish
   * OperationID: {{ channel.publish.operationId }}
   * Description: {{ channel.description }}
   */
  publish{{ ucFirst(channel.publish.operationId) }} (payload: interfaces.{{ channel.publish['x-response-definitions'] }} ): void {
    this.setupCheck();
    global.qWrapper.sendToExchange(
      objectReduceByMap(payload, {{ paramsOutputReducer(channel.publish.message.payload) }}),
      operationIds.{{ channelId }}
    );
    console.log('RabbitMQService.publish{{ ucFirst(channel.publish.operationId) }} called.')
  }
  {% endif %}{% endfor -%}

  /**
   * All subscribe events get handled in the respective subscribeHandles
   * Each routing key is the operation id.
   * For any routing key not subscribed to, the item from the is simply marked
   * as processed for the queue this ms is bound to.
   */
  private subscribe (): void {
    global.qWrapper.consume(async (message: amqMessage) => {
      switch (message.fields.routingKey) {
        {% for path, channel in swagger.channels -%}
        {% if channel.publish and _.includes(nodegenRc.helpers.subscribeOpIds, channel.publish.operationId) -%}
        {% set channelId = _.toUpper(channel.publish.operationId) -%}
        case operationIds.{{ channelId }}: {
          let messageContent
          try{
            messageContent = JSON.parse(message.content.toString())
          } catch (e) {
            console.error(operationIds.{{ channelId }}, ' error parsing JSON: ', e);
            return { processed: false, requeue: true };
          }
          try {
            await {{ channel.publish.operationId }}ReactHandle(messageContent, operationIds.{{ channelId }});
            console.log('RabbitMQService.subscribe {{ channel.publish.operationId }} react handled successfully')
            return { processed: true, requeue: false };
          } catch (e) {
            console.error(operationIds.{{ channelId }}, ' error parsing domain method: ', e);
            return { processed: false, requeue: true };
          }
        }
        {% endif -%}
        {% endfor -%}
        default:
          return {
            processed: true,
            requeue: false
          };
      }
    });
  }
}

export default new RabbitMQService();
